#################################### NODE Angular
FROM node:alpine 
WORKDIR /app
COPY package.json .
RUN npm install
ENTRYPOINT [ "npm", "run", "build" ]
EXPOSE 3000

####################################### PYTHON
FROM ubuntu:latest
LABEL author="me"
RUN apt update && apt install python3 python3-pip
WORKDIR /app
COPY . /app
CMD ["python3","app.py"]


FROM python:3.10-slim
WORKDIR /app
COPY . /app
RUN pip install -r requirements.txt
ENTRYPOINT ["python3","app.py"]
EXPOSE 8080

###################################### MAVEN
FROM tomcat:8.0.20-jre8
COPY target/app.war /usr/local/tomcat/webapps/app.war  
EXPOSE 8080

#check below docker file
FROM tomcat
WORKDIR /app
RUN mvn clean package
COPY target/app.war /usr/local/tomcat/webapps/app.war 
EXPOSE 8080


# new file
# Stage 1: Build the application with Maven
FROM maven:3.8.1-adoptopenjdk-11 AS build
WORKDIR /app
COPY pom.xml .
COPY src ./src
RUN mvn clean package

# Stage 2: Deploy the WAR file to Tomcat
FROM tomcat:9.0-alpine
COPY --from=build /app/target/app.war /usr/local/tomcat/webapps/

EXPOSE 8080

###################################### springboot application
FROM openjdk:11
LABEL MAINTAINER="me"
COPY target/app.jar  /usr/app/
WORKDIR /usr/app/
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]

###################################### NGINX

FROM nginx:latest
COPY .  /usr/share/nginx/html
# /var/www/html
EXPOSE 80

###################################### 


# multi stage docker 

# Stage 1: Build the application using Maven
FROM maven:3.8.4-openjdk-11 AS builda
WORKDIR /usr/src/app
COPY pom.xml ./
COPY src ./src
RUN mvn clean package

# Stage 2: Run the application
FROM openjdk:11-jre-slim
WORKDIR /usr/app
COPY --from=build /usr/src/app/target/appname.jar /usr/app/app.jar
ENTRYPOINT ["java", "-jar", "app.jar"]
EXPOSE 8080

####################
RUN useradd -m username

# Switch to the non-root user
USER username

######################################
# docker-compose.yml
# version: '3.8'
# services:
#   app:
#     build: .
#     ports:
#       - "8080:8080"
#     volumes:
#       - .:/usr/app
#     environment:
#       - ENV=production





# how to troubleshoot docker container 
# docker log <containerID> 
# docker exec -it <containerID> /bin/bash 


  
# database should deply as statefull app
# Frontend should deploy as stateless app
 
 
# headless service means doesnt have IPaddress
# can access through nly service name 
 
###### myown 
FROM node:alpine
LABEL author me 
WORKDIR /app
COPY . /app/
RUN npm install  && \
    useradd -m userna 
USER userna
ENTRYPOINT [ "npm","run","build" ]
EXPOSE 3000


